/**
 * Buff Feature Implementation - SIR
 * 
 * 
 */ 

using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using Zynga.Core.Util;

public class BuffDef : IResetGame 
{
	public const string APPLIES_TO_ANY = "any";
	public const string APPLIES_TO_GLOBAL = "global";

	public string keyName { get; private set; }

	public string title { get; private set; }

	public string description { get; private set; }

	public int value { get; private set; }

	public string appliesTo { get; private set; }

	public int duration { get; private set; }

	public BuffType type { get; private set; }

	public static bool isStaticBuffDataValid;

	// The Buff definitions from SCAT or Generated on the client using Global settings
	// keyed by buff def key
	private static Dictionary<string, BuffDef> all = new Dictionary<string, BuffDef>();

	// Events
	private const string GET_STATIC_BUFFS_DATA_EVENT_NAME = "get_static_buffs_data";

	/**
	 * Init the buff definitions. Invoked once during game loading or after reset.
	 * Buff definitions are treated as "static" data by the server
	 */
	public static void init()
	{
		isStaticBuffDataValid = true;
	}

	public static void registerEventDelegates()
	{
		Server.registerEventDelegate(GET_STATIC_BUFFS_DATA_EVENT_NAME, populateBuffDefs, true);
	}

	public BuffDef(string keyName, BuffType type, int value, int duration, string appliesTo, string title = "", string description = "")
	{
		this.keyName = keyName;
		this.type = type;
		this.value = value;
		this.duration = duration;
		this.appliesTo = appliesTo;
		this.title = title;
		this.description = description;
		
		Buff.log("BuffDef.<init> keyName:{0},type:{1},value:{2},duration:{3},appliesTo:{4},title:{5},desc:{6}",
			this.keyName,
			this.type.keyName,
			this.value,
			this.duration,
			this.appliesTo,
			this.title,
			this.description);

	    if (!all.ContainsKey(keyName))
	    {
	        all.Add(keyName, this);
	    }
	    else
	    {
	        // If this gets hit, it'd be good to check to see what user flow gots us here, since we reset the dictionary on...well reset.
	        Debug.LogError("BuffDef::BuffDef - We already have an buff with this keyname! " + keyName);
	        all[keyName] = this;
	    }
	}

	/**
	 * Activate the Buff for the given buff def
	 */
	public bool apply(int newEndTimestamp)
	{
		int nowInSecs = GameTimer.currentTime;
		return apply(nowInSecs, newEndTimestamp);
	}

	/**
	 * Activate the Buff for the given buff def
	 */
	public bool apply(int startTimestamp, int newEndTimestamp)
	{
		BuffType buffType = type;
		Buff buff = Buff.getOrCreateBuff(buffType);
		Buff.log("BuffDef.apply() - applying buffDef for buffDef:{0} buffType:{1}", 
								this.keyName, buffType);
		if (buff != null)
		{
			return buff.addGameTimerAndActivateNext(this, startTimestamp, newEndTimestamp);
		}
		return false;
	}


	public static bool isActivated(string keyName)
	{
		BuffDef buffDef = null;
		if (all.TryGetValue(keyName, out buffDef))
		{
			BuffType buffType = buffDef.type;
			Buff buff = Buff.find(buffType);
			if (buff != null && buff.isActivated && 
				buff.activeDef != null && buff.activeDef.keyName == buffDef.keyName)
			{
				return true;
			}
		}
		else
		{
			Buff.log("BuffDef.isActivated null def for key:{0}", keyName);
		}
		return false;
	}	

	public static BuffDef find(string keyName, bool onlyIfBetterThanActive = false)
	{
		BuffDef buffDef = null;
		if (all.TryGetValue(keyName, out buffDef))
		{
			if (onlyIfBetterThanActive)
			{
				BuffType buffType = buffDef.type;
				Buff buff = Buff.find(buffType);
				if (buff != null && buff.isActivated)
				{
					BuffDef foundDef = buffDef;
					BuffDef activeDef = buff.activeDef;
					int thisEndTimestamp = buffDef.duration + GameTimer.currentTime;
					int activeEndTimestamp = buff.activeGameTimerRange.endTimestamp;
					if (buff.compare(foundDef, thisEndTimestamp, activeDef, activeEndTimestamp) <= 0)
					{
						// this buffDef is not better than the active def
						//Buff.log("Buff.find - found buffDef:{0} is not better than currently active:{1}, resetting to null",foundDef.keyName,activeDef.keyName);
						buffDef = null;
					}
				}
			}
		}
		else
		{
			Buff.log("BuffDef.find null def for key:{0}", keyName);
		}
		return buffDef;
	}

	// "Global" Buff Definitions have a key generated by the client of the form 
	// appliesTo_<buff_type>_value_duration ex. global_xp_multiplier_1_24
	public static string generateGlobalKeyName(BuffType type, int value, int duration, string appliesTo)
	{
		string underscore = "_";
		System.Text.StringBuilder result = new System.Text.StringBuilder();
		
		result.Append(appliesTo)
			.Append(underscore)
			.Append(type.keyName)
			.Append(underscore)
			.Append(value)
			.Append(underscore)
			.Append(duration);

		return result.ToString();
	}

	//=========================================================================
	//	HELPER Methods
	//=========================================================================

	/**
	 * Event handler for GET_STATIC_BUFFS_DATA_EVENT_NAME
	 * Populates buff definitions from SCAT data
	 */
	public static void populateBuffDefs(JSON staticBuffsData)
	{
		//Buff.log("BuffDef.populateBuffDefs() - staticBuffsData:{0}", (staticBuffsData == null ? "<null>" : staticBuffsData.ToString()));
		if (staticBuffsData != null)
		{
			JSON[] staticBuffsJSON = staticBuffsData.getJsonArray("buffs");
			if (staticBuffsJSON != null)
			{
				//Parse through the JSON Provided from SCAT and register Buff Definitions.
				foreach (JSON data in staticBuffsJSON)
				{
					string keyName = data.getString("key_name", "");
					string baseType = data.getString("base_type", "");
					BuffType buffType = BuffType.find(baseType);
					BuffDef buffDef = new BuffDef(keyName, 
													buffType, 
													data.getInt("value", 0), 
													data.getInt("duration", 0), 
													data.getString("applies_to", APPLIES_TO_ANY), 
													data.getString("title", ""), 
													data.getString("description", ""));
					Buff.getOrCreateBuff(buffType);
				}
			}
		}
		
		isStaticBuffDataValid = true;

	}

	// Implements IResetGame
	public static void resetStaticClassData()
	{
		all = new Dictionary<string, BuffDef>();
	}

}
