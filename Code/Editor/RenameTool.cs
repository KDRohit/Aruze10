using UnityEngine;
using UnityEditor;

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Text;
using System.Diagnostics;
using System.Linq;

public class ShowTextPopup : EditorWindow
{
	public static string sMessage = "";
	public static string sSequentialMessage = null;
	public static string sText = "";
	public static string sText2 = null;
	public static string sSequentialNum = "";
	public static string sButton1 = "";
	public static string sButton2 = "";
	public delegate void FinishCallback(bool success, string text);
	public static bool bShowing = false;
	static FinishCallback pFinish;
	public static bool bFirst = true;

	public static void Init(String message, string text, FinishCallback finish, string text2 = null, string sequentialMessage = null, string sequentialNum = "", string button1 = "Ok", string button2 = "Cancel")
	{
		if (bShowing)
		{
			finish(false, text);
			return;
		}

		bShowing = true;
		bFirst = true;

		sMessage = message;
		sSequentialMessage = sequentialMessage;
		sText = text;
		sText2 = text2;
		sSequentialNum = sequentialNum;
		sButton1 = button1;
		sButton2 = button2;
		pFinish = finish;

		ShowTextPopup window = ScriptableObject.CreateInstance<ShowTextPopup>();
		window.position = new Rect(Screen.width / 2, Screen.height / 2, 250, 200);
		window.ShowPopup();
	}

	void OnGUI()
	{
		EditorGUILayout.LabelField(sMessage,EditorStyles.wordWrappedLabel);

		string sTextFieldName = "ShowTextPopupExpression";
		GUI.SetNextControlName(sTextFieldName);

		sText = EditorGUILayout.TextField(sText);

		if (sText2 != null)
		{
			sText2 = EditorGUILayout.TextField(sText2);
		}
		else
		{
			if (sSequentialMessage != null)
			{
				EditorGUILayout.LabelField(sSequentialMessage, EditorStyles.wordWrappedLabel);
				sSequentialNum = EditorGUILayout.TextField(sSequentialNum);
			}

			GUILayout.Space(20);

			/// Handle pressing return on Search Expression
			if(GUI.GetNameOfFocusedControl() == sTextFieldName)
			{
				if ((Event.current.type == EventType.KeyUp) && (Event.current.keyCode == KeyCode.Return))
				{
					pFinish(true, sText);
					this.Close();
					bShowing = false;
				}
			}
		}
		GUILayout.Space(50);
		if (GUILayout.Button(sButton1))
		{
			pFinish(true, sText);
			this.Close();
			bShowing = false;
		}
		if (GUILayout.Button(sButton2))
		{
			pFinish(false, sText);
			this.Close();
			bShowing = false;
		}

		/// Not sure why this doesn't work
		if (bFirst)
		{
			GUI.FocusControl(sTextFieldName);
			bFirst = false;
		}
	}

	// Doesn't work?
	void OnLostFocus() {
		pFinish(false, sText);
		this.Close();
		bShowing = false;
	}
}


public class RenameTool
{
/*
	Operation: Multi-Select game objects, then run tool.
	Tool can:
	Rename everything to the same name
	Add a suffix to each name
	Add a prefix to each name
	Add sequential suffix to each name
	Search and Replace all or part of the text in a name
	Cleanup: Remove spaces and all subsequent text from a name (I never use spaces so this would be useful to get rid of the “ (1)” that gets generated by a Unity copy, and fixup the dumb renames Unity does on FBX import)
*/
	public delegate void ProcessCallback(List<GameObject> pGameObjects, string text);

	static void ProcessRename(string message, ProcessCallback pProcessCallback, string text2 = null, string sequentialMessage = null, string sequentialNum = null)
	{
		List<GameObject> pGameObjects = new List<GameObject>(Selection.gameObjects);

		if (pGameObjects.Count == 0)
		{
			return;
		}

		if (message == null)
		{
			pProcessCallback(pGameObjects, null);
		}

		ShowTextPopup.Init(message + ":", "",
			delegate(bool success, string text)
			{
				if (!success)
				{
					return;
				}

				Undo.RecordObjects(pGameObjects.ToArray(), message);

				pProcessCallback(pGameObjects, text);
			},
			text2,
			sequentialMessage,
			sequentialNum
		);
	}

	[MenuItem("GameObject/Rename Objects/Rename to Same Name", false, 12)]
	static void RenameSameName()
	{
		ProcessRename("Rename to Same Name",
			delegate(List<GameObject> pGameObjects, string text)
			{
				for (int i = 0; i < pGameObjects.Count; i++)
				{
					pGameObjects[i].name = text;
				}
			}
		);
	}

	[MenuItem("GameObject/Rename Objects/Add Prefix", false, 12)]
	static void RenameAddPrefix()
	{
		ProcessRename("Add Prefix Text",
			delegate(List<GameObject> pGameObjects, string text)
			{
				for (int i = 0; i < pGameObjects.Count; i++)
				{
					pGameObjects[i].name = text + pGameObjects[i].name;
				}
			}
		);
	}

	[MenuItem("GameObject/Rename Objects/Add Suffix", false, 12)]
	static void RenameAddSuffix()
	{
		ProcessRename("Add Suffix Text",
			delegate(List<GameObject> pGameObjects, string text)
			{
				string sequentialNum = ShowTextPopup.sSequentialNum;
				int numLength = sequentialNum.Length;
				int startInt;
				bool intResult = int.TryParse(sequentialNum, out startInt);

				if (numLength > 0 && intResult)
				{
					// Sort list by hierarchy order
					pGameObjects.Sort(SortByInstanceID);
					for (int i = 0; i < pGameObjects.Count; i++)
					{
						pGameObjects[i].name = pGameObjects[i].name + text + (startInt + i).ToString("D" + numLength);;
					}
				}
				else
				{
					for (int i = 0; i < pGameObjects.Count; i++)
					{
						pGameObjects[i].name = pGameObjects[i].name + text;
					}
				}
			},
			null,
			"Sequential Number Start:",
			""
		);
	}

	static int SortByInstanceID(GameObject a, GameObject b)
	{
		return a.transform.GetSiblingIndex().CompareTo(b.transform.GetSiblingIndex());
	}

	[MenuItem("GameObject/Rename Objects/Search And Replace", false, 12)]
	static void RenameSearchAndReplace()
	{
		ProcessRename("Search and Replace Strings",
			delegate(List<GameObject> pGameObjects, string text)
			{
				for (int i = 0; i < pGameObjects.Count; i++)
				{
					pGameObjects[i].name = pGameObjects[i].name.Replace(text, ShowTextPopup.sText2);
				}
			},
			""
		);
	}

	[MenuItem("GameObject/Rename Objects/Cleanup (Remove whitespace and suffix)", false, 12)]
	static void RenameCleanupName()
	{
		List<GameObject> pGameObjects = new List<GameObject>(Selection.gameObjects);

		Undo.RecordObjects(pGameObjects.ToArray(), "Rename cleanup");

		for (int i = 0; i < pGameObjects.Count; i++)
		{
			int nIndex = pGameObjects[i].name.IndexOf(' ');

			if (nIndex >= 1)
			{
				pGameObjects[i].name = pGameObjects[i].name.Substring(0, nIndex);
			}
		}
	}
}
